#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid       = "TU_SSID";
const char* password   = "TU_PASS";
const char* serverUrl  = "https://r1pwyuaxa9.execute-api.us-east-1.amazonaws.com/upload-audio";

const int micPin       = 34;               // Pin ADC del micrófono
const int sampleRate   = 8000;             // 8 kHz de muestreo
const int durationSecs = 10;               // Duración total: 10 segundos
const int totalSamples = sampleRate * durationSecs;  // 80 000 muestras

void setup() {
  Serial.begin(115200);
  delay(100);

  // 1) Conectar a Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Conectando a Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(250);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("Wi-Fi conectado, IP: " + WiFi.localIP().toString());

  // 2) Reservar buffer de 1 byte por muestra (≈80 KB)
  uint8_t* buffer = (uint8_t*) malloc(totalSamples);
  if (!buffer) {
    Serial.println("Error: memoria insuficiente para buffer");
    while (true) { delay(1000); }
  }

  // 3) Grabar 10 s en el buffer, escalando ADC 12-bit → 8-bit
  Serial.println("Grabando audio...");
  for (int i = 0; i < totalSamples; ++i) {
    int raw = analogRead(micPin);  // 0–4095
    buffer[i] = raw >> 4;          // 0–255
    delayMicroseconds(1000000 / sampleRate);
  }
  Serial.println("Grabación completa");

  // 4) Enviar todo el buffer en un único POST
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/octet-stream");

    Serial.println("Enviando audio completo...");
    int code = http.sendRequest("POST", buffer, totalSamples);
    if (code > 0) {
      Serial.printf("HTTP %d\n", code);
      String payload = http.getString();
      Serial.println("Respuesta servidor:");
      Serial.println(payload);
    } else {
      Serial.printf("Error envío: %s\n", http.errorToString(code).c_str());
    }
    http.end();
  } else {
    Serial.println("Wi-Fi desconectado al intentar enviar");
  }

  // 5) Liberar memoria
  free(buffer);
  Serial.println("Proceso terminado");
}

void loop() {
  // No hace nada; todo sucede en setup()
}
